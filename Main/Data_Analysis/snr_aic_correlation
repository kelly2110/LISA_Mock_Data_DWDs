import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.stats import pearsonr

# Main folder containing subfolders (e.g., DWD_2)
main_folder = 'DWD_2'
# Subfolder for 95_data_points
data_points_subfolder = '95_data_points'
# Temperature to filter
filter_temperature = 180

# Initialize lists to store data
alpha_values = []
vw_values = []
snr_values = []
aic_signal_values = []

# Loop over all subfolders in the main folder
for root, dirs, files in os.walk(main_folder):
    for subfolder in dirs:
        # Check if the subfolder name represents the format {n_c}_data_points
        if subfolder == data_points_subfolder:
            data_points_folder_path = os.path.join(root, subfolder)

            # Loop over subfolders within 95_data_points
            for subfolder_95 in os.listdir(data_points_folder_path):
                subfolder_path = os.path.join(data_points_folder_path, subfolder_95)

                # Check if it's a directory, follows the naming convention, and temperature matches
                if os.path.isdir(subfolder_path) and subfolder_95.startswith('alpha_') and subfolder_95.endswith(f'_temp_{filter_temperature}'):
                    alpha_value = float(subfolder_95.split('_')[1])
                    vw_value = float(subfolder_95.split('_')[3])

                    # Construct the path to the snr_results.csv file
                    snr_file_path = os.path.join(subfolder_path, 'results_snr.csv')
                    # Construct the path to the aic_results.csv file
                    aic_file_path = os.path.join(subfolder_path, 'results_aic.csv')

                    # Check if the files exist
                    if os.path.exists(snr_file_path) and os.path.exists(aic_file_path):
                        # Read CSV files into pandas DataFrames
                        df_snr = pd.read_csv(snr_file_path)
                        df_aic = pd.read_csv(aic_file_path)

                        # Check if any rows are present in the DataFrames
                        if not df_snr.empty and not df_aic.empty:
                            # Extract SNR and AIC signal values
                            snr_value = df_snr['snr_original'].values[0]
                            aic_signal_value = df_aic['AIC_noise'].values[0]

                            # Append values to lists
                            alpha_values.append(alpha_value)
                            vw_values.append(vw_value)
                            snr_values.append(snr_value)
                            aic_signal_values.append(aic_signal_value)

# Convert lists to arrays
alpha_values = np.array(alpha_values)
vw_values = np.array(vw_values)
snr_values = np.array(snr_values)
aic_signal_values = np.array(aic_signal_values)

# Sort unique alpha values numerically
unique_alpha_values = np.unique(alpha_values)
sorted_unique_alpha_values = np.sort(unique_alpha_values)

# Initialize lists for sorted data
sorted_alpha_values = []
sorted_vw_values = []
sorted_snr_values = []
sorted_aic_signal_values = []

# Loop through sorted unique alpha values
for alpha_value in sorted_unique_alpha_values:
    # Find indices where alpha equals the current unique alpha value
    alpha_indices = np.where(alpha_values == alpha_value)[0]

    # Append sorted data for the current alpha value
    sorted_alpha_values.extend(alpha_values[alpha_indices])
    sorted_vw_values.extend(vw_values[alpha_indices])
    sorted_snr_values.extend(snr_values[alpha_indices])
    sorted_aic_signal_values.extend(aic_signal_values[alpha_indices])

# Convert lists to arrays for the sorted data
sorted_alpha_values = np.array(sorted_alpha_values)
sorted_vw_values = np.array(sorted_vw_values)
sorted_snr_values = np.array(sorted_snr_values)
sorted_aic_signal_values = np.array(sorted_aic_signal_values)

# Filter data for alpha values <= 0.45 and non-NaN triangles
filtered_indices = np.where((sorted_alpha_values <= 0.45) & (~np.isnan(sorted_snr_values)) & (~np.isnan(sorted_aic_signal_values)))[0]
filtered_alpha_values = sorted_alpha_values[filtered_indices]
print(filtered_alpha_values)
filtered_vw_values = sorted_vw_values[filtered_indices]
print(filtered_vw_values)
filtered_snr_values = sorted_snr_values[filtered_indices]
print(filtered_snr_values)
filtered_aic_signal_values = sorted_aic_signal_values[filtered_indices]
print(aic_signal_values[0:4])

# Calculate Pearson correlation coefficient and p-value
correlation_coefficient, p_value = pearsonr( filtered_aic_signal_values, filtered_snr_values)

# Print the correlation coefficient and p-value
print(f"Pearson Correlation Coefficient: {correlation_coefficient}")
print(f"P-value: {p_value}")
